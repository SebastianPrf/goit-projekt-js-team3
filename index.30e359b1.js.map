{"mappings":"kpBAsBA,IAAAA,EACAC,E,iFArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,6J,MCAzDC,EAAiB,IAAAC,IAAoBL,EAAA,SAAAM,QAA6C,SAAAC,OAAAC,KAAAC,KAAUC,WCE5F,MAAMC,EAAkBC,SAASC,cAAc,kBACzCC,EAAU,mCACVC,EAAW,+BAEXC,EAAkB,oBAIxBC,eAAeC,EAAYC,GACzB,MAAMC,QAAiBC,MAAM,GAAGN,8BAAqCD,UAAgBK,KAC/EG,QAAoBF,EAASG,OAEnC,OADAC,QAAQC,IAAIH,EAAYI,SACjBJ,EAAYI,OACrB,CAEAT,eAAeU,EAAkBC,GAC/B,MAAMC,QA6BRZ,iBACE,MAAMG,QAAiBC,MAAM,GAAGN,KAAYC,aAA2BF,KAEvE,aADmBM,EAASG,QAChBM,MACd,CAjCuBC,GAEfC,EAASH,EACZI,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,KAAEA,EAAIC,UAAEA,EAASC,aAAEA,EAAYC,eAAEA,MACzD,MAAMC,EAAcH,EACjBJ,KAAIQ,IACH,MAAMC,EAAQZ,EAAOa,MAAKD,GAASA,EAAM5C,KAAO2C,IAChD,OAAOC,EAAQA,EAAMN,KAAO,IAAI,IAEjCQ,QAAOC,GAAaA,IACpBC,KAAK,MAEFC,GAAeT,GAAgBC,GAAkB,IAAIS,MAAM,EAAG,GAC9DC,EAAad,GAAgBC,EAGnC,MAAO,sFADU,MAAfF,EAAsB,kCAAkCA,IAAgBgB,EAAA7C,2BAGI4C,sDACtCA,yDACET,OAAiBO,uCAEtD,IAEND,KAAK,IAER,OAAOlC,EAAgBuC,mBAAmB,YAAanB,EACzD,CAQAb,EA7CW,GA8CRiC,KAAKxB,GACLyB,OAAMC,GAAS7B,QAAQ6B,MAAMA,KCrDhC,MAGMC,EAAkB1C,SAASC,cAAc,kBACzC0C,EAAQ3C,SAASC,cAAc,uBACnBD,SAASC,cAAc,wBAE/B2C,iBAAiB,SAIpBvC,eAA4BwC,GACjCA,EAAEC,iBACF,MAAMtC,QAAiBC,MACrB,4FAA4DkC,EAAMI,gBAE9DC,QAAaxC,EAASG,OAQ5B,OAPAL,EAAYqC,EAAMI,OACfR,KAAKxB,EAAkBiC,EAAKlC,UAC5B0B,OAAMC,IASTC,EAAgBO,UAAY,GAPxBC,MAAM,iBAEPC,QAAST,EAAgBO,UAAY,IAChCP,EAAgBO,UAAYD,EAAKI,MAAM,EACjD,IC3BC,MACG,MAAMC,EAAO,CACTC,aAActD,SAASC,cAAc,qBACrCsD,cAAevD,SAASC,cAAc,sBACtCuD,MAAOxD,SAASC,cAAc,iBAKlCoD,EAAKE,cAAcX,iBAAiB,SAEpC,WACIS,EAAKG,MAAMC,UAAUC,OAAO,YAChC,GACJ,EAdC","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-6f5bc9ad2456f715.js","node_modules/@parcel/runtime-js/lib/runtime-7d71a845b9eb3fac.js","src/js/fetch-data.js","src/js/search-movies.js","src/js/modal.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"eFRlh\\\":\\\"index.30e359b1.js\\\",\\\"625wv\\\":\\\"no-poster-available.19417c1b.jpg\\\",\\\"bSbOs\\\":\\\"index.ef3e2a7c.css\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"625wv\")).toString();","import noMoviePoster from '../images/no-poster-available.jpg';\n\nconst galleryOfMovies = document.querySelector('.movie-gallery');\nconst API_KEY = '50faffa66bb05e881b7f3de0b265b30c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_PATH = '/trending/all/day';\nconst GENRE_LIST_PATH = `/genre/movie/list`;\n\nlet page = 1;\n\nasync function fetchMovies(page) {\n  const response = await fetch(`${BASE_URL}${MAIN_PAGE_PATH}?api_key=${API_KEY}&page=${page}`);\n  const fetchMovies = await response.json();\n  console.log(fetchMovies.results);\n  return fetchMovies.results;\n}\n\nasync function renderMoviesCards(movies) {\n  const genres = await fetchGenres();\n\n  const markup = movies\n    .map(({ poster_path, title, name, genre_ids, release_date, first_air_date }) => {\n      const movieGenres = genre_ids\n        .map(genreId => {\n          const genre = genres.find(genre => genre.id === genreId);\n          return genre ? genre.name : null;\n        })\n        .filter(genreName => genreName)\n        .join(', ');\n\n      const releaseDate = (release_date || first_air_date || '').slice(0, 4);\n      const movieTitle = title ? title : name;\n      const moviePoster =\n        poster_path != null ? `https://image.tmdb.org/t/p/w500${poster_path}` : noMoviePoster;\n      return `\n          <li class=\"movie-card\">\n            <img class=\"movie-card__img\" src=\"${moviePoster}\" loading=\"lazy\" alt=\"${movieTitle}\" />\n            <h2 class=\"movie-card__heading\">${movieTitle}</h2>\n            <span class=\"movie-card__caption\">${movieGenres} | ${releaseDate}</span>\n          </li>\n          `;\n    })\n    .join('');\n\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n}\n\nasync function fetchGenres() {\n  const response = await fetch(`${BASE_URL}/${GENRE_LIST_PATH}?api_key=${API_KEY}`);\n  const data = await response.json();\n  return data.genres;\n}\n\nfetchMovies(page)\n  .then(renderMoviesCards)\n  .catch(error => console.error(error));\n\nexport { fetchMovies, renderMoviesCards, fetchGenres };\n","import { renderMoviesCards, fetchMovies } from './fetch-data';\n\nconst API_KEY = '50faffa66bb05e881b7f3de0b265b30c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst SEARCH_MOVIE_PATH = `/search/movie`;\nconst galleryOfMovies = document.querySelector('.movie-gallery');\nconst input = document.querySelector('.search-form__input');\nconst searchBtn = document.querySelector('.search-form__button');\n\nsearchBtn.addEventListener('click', searchMovies);\n\nlet page = 1;\n\nexport async function searchMovies(e) {\n  e.preventDefault();\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_PATH}?api_key=${API_KEY}&query=${input.value}&page=${page}`,\n  );\n  const data = await response.json();\n  fetchMovies(input.value)\n    .then(renderMoviesCards(data.results))\n    .catch(error => {\n      clearInterfaceUI();\n      alert('No results');\n    })\n    .finally((galleryOfMovies.innerHTML = ''));\n  return (galleryOfMovies.innerHTML = data.query[0]);\n}\n\nfunction clearInterfaceUI() {\n  galleryOfMovies.innerHTML = '';\n}\n","(() => {\n    const refs = {\n        openModalBtn: document.querySelector(\"[data-modal-open]\"),\n        closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n        modal: document.querySelector(\"[data-modal]\"),\n    };\n\n    // refs.openModalBtn.addEventListener(\"click\", toggleModal); \n    // do uruchomienia po napisaniu otwierania okienek\n    refs.closeModalBtn.addEventListener(\"click\", toggleModal);\n\n    function toggleModal() {\n        refs.modal.classList.toggle(\"is-hidden\");\n    }\n})();"],"names":["$d49cb2d7b03f6a77$export$6503ec6e8aabbaf","$d49cb2d7b03f6a77$export$f7ad0328861e2f03","$d49cb2d7b03f6a77$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$5342c76462a09b41$exports","URL","resolve","import","meta","url","toString","$9605285e09c010c6$var$galleryOfMovies","document","querySelector","$9605285e09c010c6$var$API_KEY","$9605285e09c010c6$var$BASE_URL","$9605285e09c010c6$var$GENRE_LIST_PATH","async","$9605285e09c010c6$export$88181abcadffafee","page","response","fetch","fetchMovies","json","console","log","results","$9605285e09c010c6$export$3cfafeb53fa7e261","movies","genres","$9605285e09c010c6$export$e95d448b93b2cdb","markup","map","poster_path","title","name","genre_ids","release_date","first_air_date","movieGenres","genreId","genre","find","filter","genreName","join","releaseDate","slice","movieTitle","$parcel$interopDefault","insertAdjacentHTML","then","catch","error","$05617eee9c720756$var$galleryOfMovies","$05617eee9c720756$var$input","addEventListener","e","preventDefault","value","data","innerHTML","alert","finally","query","refs","openModalBtn","closeModalBtn","modal","classList","toggle"],"version":3,"file":"index.30e359b1.js.map"}