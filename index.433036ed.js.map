{"mappings":"AAAA,MAAMA,EAAkBC,SAASC,cAAc,kBACzCC,EAAU,mCACVC,EAAW,+BAEXC,EAAkB,oBAIxBC,eAAeC,EAAYC,GACzB,MAAMC,QAAiBC,MAAM,GAAGN,8BAAqCD,UAAgBK,KAC/EG,QAAoBF,EAASG,OAEnC,OADAC,QAAQC,IAAIH,EAAYI,SACjBJ,EAAYI,OACrB,CAEAT,eAAeU,EAAkBC,GAC/B,MAAMC,QA2BRZ,iBACE,MAAMG,QAAiBC,MAAM,GAAGN,KAAYC,aAA2BF,KAEvE,aADmBM,EAASG,QAChBM,MACd,CA/BuBC,GAEfC,EAASH,EACZI,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,KAAEA,EAAIC,UAAEA,EAASC,aAAEA,EAAYC,eAAEA,MACzD,MASMC,EAAaL,GAAgBC,EACnC,MAAO,iHAEgEF,0BAAoCM,oDACrEA,uDAblBH,EACjBJ,KAAIQ,IACH,MAAMC,EAAQZ,EAAOa,MAAKD,GAASA,EAAME,KAAOH,IAChD,OAAOC,EAAQA,EAAMN,KAAO,IAAI,IAEjCS,QAAOC,GAAaA,IACpBC,KAAK,YAEaT,GAAgBC,GAAkB,eAAeS,MAAM,EAAG,oCAQ5E,IAEJD,KAAK,IAER,OAAOnC,EAAgBqC,mBAAmB,YAAajB,EACzD,CAQAb,EA3CW,GA4CR+B,KAAKtB,GACLuB,OAAMC,GAAS3B,QAAQ2B,MAAMA,KCjDhC,MAGMC,EAAkBxC,SAASC,cAAc,kBACzCwC,EAAQzC,SAASC,cAAc,uBACnBD,SAASC,cAAc,wBAE/ByC,iBAAiB,SAIpBrC,eAA4BsC,GACjCA,EAAEC,iBACF,MAAMpC,QAAiBC,MACrB,4FAA4DgC,EAAMI,gBAE9DC,QAAatC,EAASG,OAQ5B,OAPAL,EAAYmC,EAAMI,OACfR,KAAKtB,EAAkB+B,EAAKhC,UAC5BwB,OAAMC,IASTC,EAAgBO,UAAY,GAPxBC,MAAM,iBAEPC,QAAST,EAAgBO,UAAY,IAChCP,EAAgBO,UAAYD,EAAKI,MAAM,EACjD,IC3BC,MACG,MAAMC,EAAO,CACTC,aAAcpD,SAASC,cAAc,qBACrCoD,cAAerD,SAASC,cAAc,sBACtCqD,MAAOtD,SAASC,cAAc,iBAKlCkD,EAAKE,cAAcX,iBAAiB,SAEpC,WACIS,EAAKG,MAAMC,UAAUC,OAAO,YAChC,GACJ,EAdC","sources":["src/js/fetch-data.js","src/js/search-movies.js","src/js/modal.js"],"sourcesContent":["const galleryOfMovies = document.querySelector('.movie-gallery');\nconst API_KEY = '50faffa66bb05e881b7f3de0b265b30c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_PATH = '/trending/all/day';\nconst GENRE_LIST_PATH = `/genre/movie/list`;\n\nlet page = 1;\n\nasync function fetchMovies(page) {\n  const response = await fetch(`${BASE_URL}${MAIN_PAGE_PATH}?api_key=${API_KEY}&page=${page}`);\n  const fetchMovies = await response.json();\n  console.log(fetchMovies.results);\n  return fetchMovies.results;\n}\n\nasync function renderMoviesCards(movies) {\n  const genres = await fetchGenres();\n\n  const markup = movies\n    .map(({ poster_path, title, name, genre_ids, release_date, first_air_date }) => {\n      const movieGenres = genre_ids\n        .map(genreId => {\n          const genre = genres.find(genre => genre.id === genreId);\n          return genre ? genre.name : null;\n        })\n        .filter(genreName => genreName)\n        .join(', ');\n\n      const releaseDate = (release_date || first_air_date || 'Brak danych').slice(0, 4);\n      const movieTitle = title ? title : name;\n      return `\n        <li class=\"movie-card\">\n          <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" loading=\"lazy\" alt=\"${movieTitle}\" />\n          <h2 class=\"movie-card__heading\">${movieTitle}</h2>\n          <span class=\"movie-card__caption\">${movieGenres} | ${releaseDate}</span>\n        </li>\n        `;\n    })\n    .join('');\n\n  return galleryOfMovies.insertAdjacentHTML('beforeend', markup);\n}\n\nasync function fetchGenres() {\n  const response = await fetch(`${BASE_URL}/${GENRE_LIST_PATH}?api_key=${API_KEY}`);\n  const data = await response.json();\n  return data.genres;\n}\n\nfetchMovies(page)\n  .then(renderMoviesCards)\n  .catch(error => console.error(error));\n\nexport { fetchMovies, renderMoviesCards, fetchGenres };\n","import { renderMoviesCards, fetchMovies } from './fetch-data';\n\nconst API_KEY = '50faffa66bb05e881b7f3de0b265b30c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst SEARCH_MOVIE_PATH = `/search/movie`;\nconst galleryOfMovies = document.querySelector('.movie-gallery');\nconst input = document.querySelector('.search-form__input');\nconst searchBtn = document.querySelector('.search-form__button');\n\nsearchBtn.addEventListener('click', searchMovies);\n\nlet page = 1;\n\nexport async function searchMovies(e) {\n  e.preventDefault();\n  const response = await fetch(\n    `${BASE_URL}${SEARCH_MOVIE_PATH}?api_key=${API_KEY}&query=${input.value}&page=${page}`,\n  );\n  const data = await response.json();\n  fetchMovies(input.value)\n    .then(renderMoviesCards(data.results))\n    .catch(error => {\n      clearInterfaceUI();\n      alert('No results');\n    })\n    .finally((galleryOfMovies.innerHTML = ''));\n  return (galleryOfMovies.innerHTML = data.query[0]);\n}\n\nfunction clearInterfaceUI() {\n  galleryOfMovies.innerHTML = '';\n}\n","(() => {\n    const refs = {\n        openModalBtn: document.querySelector(\"[data-modal-open]\"),\n        closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n        modal: document.querySelector(\"[data-modal]\"),\n    };\n\n    // refs.openModalBtn.addEventListener(\"click\", toggleModal); \n    // do uruchomienia po napisaniu otwierania okienek\n    refs.closeModalBtn.addEventListener(\"click\", toggleModal);\n\n    function toggleModal() {\n        refs.modal.classList.toggle(\"is-hidden\");\n    }\n})();"],"names":["$9605285e09c010c6$var$galleryOfMovies","document","querySelector","$9605285e09c010c6$var$API_KEY","$9605285e09c010c6$var$BASE_URL","$9605285e09c010c6$var$GENRE_LIST_PATH","async","$9605285e09c010c6$export$88181abcadffafee","page","response","fetch","fetchMovies","json","console","log","results","$9605285e09c010c6$export$3cfafeb53fa7e261","movies","genres","$9605285e09c010c6$export$e95d448b93b2cdb","markup","map","poster_path","title","name","genre_ids","release_date","first_air_date","movieTitle","genreId","genre","find","id","filter","genreName","join","slice","insertAdjacentHTML","then","catch","error","$05617eee9c720756$var$galleryOfMovies","$05617eee9c720756$var$input","addEventListener","e","preventDefault","value","data","innerHTML","alert","finally","query","refs","openModalBtn","closeModalBtn","modal","classList","toggle"],"version":3,"file":"index.433036ed.js.map"}